type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    address: [Address!]!
    role: Role!
}

type CurrentUser {
    id: ID!
    firstName: String!
    lastName: String!
    role: Role!
    mood: [Mood]
    habit: [Habit]
}

enum Role {
    ADMIN
    REGULAR
    PREMIUM
    TRAINER
}

type Address {
    id: ID!
    street: String!
    city: String!
    country: String!
    userId: ID!
}

input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    address: [AddressInput!]!
    role: Role!
}

input UpdateUserInput {
    firstName: String
    lastName: String
    email: String
    address: [AddressInput]
}

input AddressInput {
    street: String!
    city: String!
    country: String!
}

input RoleInput {
    name: Role!
}

input LoginInput {
    email: String!
    password: String!
}

extend type Query {
    getCurrentUser(id: ID!): CurrentUser!
    getUsers: [User!]!
    getRole(id: Int!): Role!
}

extend type Mutation {
    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): String!
    deleteUser(id: ID!): User!
    login(input: LoginInput!): Any!
}