package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"github.com/AntonioTrupac/socialHabitsTracker/models"

	"github.com/AntonioTrupac/socialHabitsTracker/graph/customTypes"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input customTypes.UserInput) (*customTypes.User, error) {
	user, err := r.UserRepository.CreateUser(&input)

	userCreated := &customTypes.User{
		FirstName: user.FirstName,
		LastName:  user.LastName,
		Email:     user.Email,
		Password:  user.Password,
		Role:      nil,
		ID:        int(user.ID),
	}

	if err != nil {
		return nil, err
	}

	return userCreated, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input customTypes.UserInput) (*customTypes.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*customTypes.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id int) (*customTypes.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

func mapAddressModelToInput(addressesModel []*models.Address) []*customTypes.Address {
	var addresses []*customTypes.Address

	for _, address := range addressesModel {
		addresses = append(addresses, &customTypes.Address{
			City:    address.City,
			Country: address.Country,
			Street:  address.Street,
		})
	}

	return addresses
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*customTypes.User, error) {
	var users []*customTypes.User
	usersRepo, err := r.UserRepository.GetUsers()

	for _, u := range usersRepo {
		users = append(users, &customTypes.User{
			FirstName: u.FirstName,
			LastName:  u.LastName,
			Email:     u.Email,
			Password:  u.Password,
			Role:      nil,
			ID:        int(u.ID),
			Address:   mapAddressModelToInput(u.Address),
		})
	}

	if err != nil {
		return nil, err
	}

	return users, nil
}
