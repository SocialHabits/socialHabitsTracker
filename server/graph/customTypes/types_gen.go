// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package customTypes

import (
	"fmt"
	"io"
	"strconv"
)

type Address struct {
	ID      int    `json:"id"`
	Street  string `json:"street"`
	City    string `json:"city"`
	Country string `json:"country"`
	UserID  int    `json:"userId"`
}

type AddressInput struct {
	Street  string `json:"street"`
	City    string `json:"city"`
	Country string `json:"country"`
}

type Book struct {
	ID        int    `json:"id"`
	Title     string `json:"title"`
	Author    string `json:"author"`
	Publisher string `json:"publisher"`
}

type BookInput struct {
	Title     string `json:"title"`
	Author    string `json:"author"`
	Publisher string `json:"publisher"`
}

type CreateHabitInput struct {
	Name      string    `json:"name"`
	Goal      *int      `json:"goal"`
	StartDate string    `json:"startDate"`
	EndDate   string    `json:"endDate"`
	Type      HabitType `json:"type"`
}

type CurrentUser struct {
	ID        int      `json:"id"`
	FirstName string   `json:"firstName"`
	LastName  string   `json:"lastName"`
	Role      Role     `json:"role"`
	Mood      []*Mood  `json:"mood"`
	Habit     []*Habit `json:"habit"`
}

type Habit struct {
	ID        int       `json:"id"`
	Name      string    `json:"name"`
	Skipped   int       `json:"skipped"`
	Completed int       `json:"completed"`
	Streak    int       `json:"streak"`
	Failed    int       `json:"failed"`
	Total     int       `json:"total"`
	Goal      int       `json:"goal"`
	StartDate string    `json:"startDate"`
	EndDate   string    `json:"endDate"`
	Type      HabitType `json:"type"`
	UserID    *int      `json:"userId"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mood struct {
	ID        int           `json:"id"`
	Note      *string       `json:"note"`
	Types     MoodType      `json:"types"`
	Intensity MoodIntensity `json:"intensity"`
	UserID    int           `json:"userId"`
}

type MoodInput struct {
	Note      *string       `json:"note"`
	Types     MoodType      `json:"types"`
	Intensity MoodIntensity `json:"intensity"`
}

type RoleInput struct {
	Name Role `json:"name"`
}

type Todo struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

type TodoInput struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

type UpdateMoodInput struct {
	Note *string `json:"note"`
}

type UpdateUserInput struct {
	FirstName *string         `json:"firstName"`
	LastName  *string         `json:"lastName"`
	Email     *string         `json:"email"`
	Address   []*AddressInput `json:"address"`
}

type User struct {
	ID        int        `json:"id"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Password  string     `json:"password"`
	Address   []*Address `json:"address"`
	Role      Role       `json:"role"`
}

type UserInput struct {
	FirstName string          `json:"firstName"`
	LastName  string          `json:"lastName"`
	Email     string          `json:"email"`
	Password  string          `json:"password"`
	Address   []*AddressInput `json:"address"`
	Role      Role            `json:"role"`
}

type HabitType string

const (
	HabitTypePreset      HabitType = "PRESET"
	HabitTypeUserCreated HabitType = "USER_CREATED"
)

var AllHabitType = []HabitType{
	HabitTypePreset,
	HabitTypeUserCreated,
}

func (e HabitType) IsValid() bool {
	switch e {
	case HabitTypePreset, HabitTypeUserCreated:
		return true
	}
	return false
}

func (e HabitType) String() string {
	return string(e)
}

func (e *HabitType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HabitType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HabitType", str)
	}
	return nil
}

func (e HabitType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MoodIntensity string

const (
	MoodIntensityLow    MoodIntensity = "LOW"
	MoodIntensityMedium MoodIntensity = "MEDIUM"
	MoodIntensityHigh   MoodIntensity = "HIGH"
)

var AllMoodIntensity = []MoodIntensity{
	MoodIntensityLow,
	MoodIntensityMedium,
	MoodIntensityHigh,
}

func (e MoodIntensity) IsValid() bool {
	switch e {
	case MoodIntensityLow, MoodIntensityMedium, MoodIntensityHigh:
		return true
	}
	return false
}

func (e MoodIntensity) String() string {
	return string(e)
}

func (e *MoodIntensity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MoodIntensity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MoodIntensity", str)
	}
	return nil
}

func (e MoodIntensity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MoodType string

const (
	MoodTypeIrritated MoodType = "IRRITATED"
	MoodTypeTense     MoodType = "TENSE"
	MoodTypeExcited   MoodType = "EXCITED"
	MoodTypeCalm      MoodType = "CALM"
	MoodTypeHappy     MoodType = "HAPPY"
	MoodTypeSad       MoodType = "SAD"
	MoodTypeAngry     MoodType = "ANGRY"
	MoodTypeFearful   MoodType = "FEARFUL"
	MoodTypeDisgusted MoodType = "DISGUSTED"
	MoodTypeSurprised MoodType = "SURPRISED"
	MoodTypeAnxious   MoodType = "ANXIOUS"
	MoodTypeNegative  MoodType = "NEGATIVE"
	MoodTypeRelaxed   MoodType = "RELAXED"
)

var AllMoodType = []MoodType{
	MoodTypeIrritated,
	MoodTypeTense,
	MoodTypeExcited,
	MoodTypeCalm,
	MoodTypeHappy,
	MoodTypeSad,
	MoodTypeAngry,
	MoodTypeFearful,
	MoodTypeDisgusted,
	MoodTypeSurprised,
	MoodTypeAnxious,
	MoodTypeNegative,
	MoodTypeRelaxed,
}

func (e MoodType) IsValid() bool {
	switch e {
	case MoodTypeIrritated, MoodTypeTense, MoodTypeExcited, MoodTypeCalm, MoodTypeHappy, MoodTypeSad, MoodTypeAngry, MoodTypeFearful, MoodTypeDisgusted, MoodTypeSurprised, MoodTypeAnxious, MoodTypeNegative, MoodTypeRelaxed:
		return true
	}
	return false
}

func (e MoodType) String() string {
	return string(e)
}

func (e *MoodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MoodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MoodType", str)
	}
	return nil
}

func (e MoodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RoleRegular Role = "REGULAR"
	RolePremium Role = "PREMIUM"
	RoleTrainer Role = "TRAINER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleRegular,
	RolePremium,
	RoleTrainer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleRegular, RolePremium, RoleTrainer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
