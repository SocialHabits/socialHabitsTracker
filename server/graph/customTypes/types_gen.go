// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package customTypes

import (
	"fmt"
	"io"
	"strconv"
)

type Address struct {
	ID      int    `json:"id"`
	Street  string `json:"street"`
	City    string `json:"city"`
	Country string `json:"country"`
	UserID  int    `json:"userId"`
}

type AddressInput struct {
	Street  string `json:"street"`
	City    string `json:"city"`
	Country string `json:"country"`
}

type Book struct {
	ID        int    `json:"id"`
	Title     string `json:"title"`
	Author    string `json:"author"`
	Publisher string `json:"publisher"`
}

type BookInput struct {
	Title     string `json:"title"`
	Author    string `json:"author"`
	Publisher string `json:"publisher"`
}

type RoleInput struct {
	Name Role `json:"name"`
}

type Todo struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

type TodoInput struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

type User struct {
	ID        int        `json:"id"`
	FirstName string     `json:"firstName"`
	LastName  string     `json:"lastName"`
	Email     string     `json:"email"`
	Password  string     `json:"password"`
	Address   []*Address `json:"address"`
	Role      *Role      `json:"role"`
}

type UserInput struct {
	FirstName string          `json:"firstName"`
	LastName  string          `json:"lastName"`
	Email     string          `json:"email"`
	Password  string          `json:"password"`
	Address   []*AddressInput `json:"address"`
	Role      *Role           `json:"role"`
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RoleRegular Role = "REGULAR"
	RolePremium Role = "PREMIUM"
	RoleTrainer Role = "TRAINER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleRegular,
	RolePremium,
	RoleTrainer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleRegular, RolePremium, RoleTrainer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
